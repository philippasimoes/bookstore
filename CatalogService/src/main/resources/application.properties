#server
server.port=10000
management.server.port=10000

#database
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.datasource.url=jdbc:postgresql://postgres:5432/catalog
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver
#spring.liquibase.change-log=classpath:db/changelog-master.xml
spring.jpa.properties.hibernate.default_schema=catalogservice

#rabbitmq
spring.rabbitmq.host=rabbitmq
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
rabbitmq.queue.event.updated.name=stock_updated
rabbitmq.queue.event.soldout.name=stock_soldout
rabbitmq.exchange.name=stock_exchange
rabbitmq.routing.key=stock_routing_key

#logs
logging.file.path=CatalogService/log
logging.file.name=${logging.file.path}/catalog-service.log
logging.level.org.springframework.security=DEBUG

#auth
spring.security.oauth2.client.registration.keycloak.client-id=catalog-service
spring.security.oauth2.client.registration.keycloak.client-secret=FD3bZqrV67ZGFktuQnX02qaPMuE3V71v
spring.security.oauth2.client.registration.keycloak.scope=openid, profile, email, roles
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8080/realms/bookstore
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/bookstore
spring.security.oauth2.resourceserver.jwt.jwt-set-uri=http://keycloak:8080/realms/bookstore/protocol/openid-connect/certs

#swagger
springdoc.oAuthFlow.authorizationUrl=http://localhost:8080/realms/bookstore/protocol/openid-connect/auth
springdoc.oAuthFlow.tokenUrl=http://localhost:8080/realms/bookstore/protocol/openid-connect/token